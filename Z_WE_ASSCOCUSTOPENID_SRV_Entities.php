
<?php
  /*
    Copyright 2010 Persistent Systems Limited

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   */

    /**
    * This code was generated by the tool 'PHPDataSvcUtil.php'.
    * Runtime Version:1.0
    *
    * Changes to this file may cause incorrect behavior and will be lost if
    * the code is regenerated.
    */

    require_once 'Context/ObjectContext.php';
    /**
    * Defines default OData Service URL for this proxy class
    */
    define("DEFAULT_ODATA_SERVICE_URL", "http://192.168.1.138:8008/sap/opu/odata/sap/Z_WE_ASSCOCUSTOPENID_SRV");
    
   /**
    * Container class Z_WE_ASSCOCUSTOPENID_SRV_Entities, Namespace: Z_WE_ASSCOCUSTOPENID_SRV
    */
    class Z_WE_ASSCOCUSTOPENID_SRV_Entities extends ObjectContext
    {
    
        protected $_SubscriptionCollection;
        protected $_NotificationCollection;
        protected $_MsgSet;
        
       /**
        * The constructor for Z_WE_ASSCOCUSTOPENID_SRV_Entities accepting service URI
        */
        public function __construct($uri = "")
        {
            if(strlen($uri) == 0)
            {
                $uri = DEFAULT_ODATA_SERVICE_URL;
            }

            if (Utility::reverseFind($uri, '/') != strlen($uri) - 1)
            {
                $uri = $uri . '/';
            }

            $this->_baseURI = $uri;
            parent::__construct($this->_baseURI);
            $this->_entities = array(
                                "SubscriptionCollection",
                                "NotificationCollection",
                                "MsgSet");
            $this->_entitySet2Type = array(
                                            "subscriptioncollection" => "Subscription", 
                                            "notificationcollection" => "Notification", 
                                            "msgset" => "Msg");
            $this->_entityType2Set = array(
                                            "subscription" => "SubscriptionCollection", 
                                            "notification" => "NotificationCollection", 
                                            "msg" => "MsgSet");

            $this->_association = array();

    
            $this->_SubscriptionCollection = new DataServiceQuery('/'.'SubscriptionCollection', $this);
            $this->_NotificationCollection = new DataServiceQuery('/'.'NotificationCollection', $this);
            $this->_MsgSet = new DataServiceQuery('/'.'MsgSet', $this);

        }

    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset SubscriptionCollection
         * @return DataServiceQuery
         */
        public function SubscriptionCollection()
        {
            $this->_SubscriptionCollection->ClearAllOptions();
            return $this->_SubscriptionCollection;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset NotificationCollection
         * @return DataServiceQuery
         */
        public function NotificationCollection()
        {
            $this->_NotificationCollection->ClearAllOptions();
            return $this->_NotificationCollection;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset MsgSet
         * @return DataServiceQuery
         */
        public function MsgSet()
        {
            $this->_MsgSet->ClearAllOptions();
            return $this->_MsgSet;
        }
    
       /**
        * Functions for adding object to the entityset/collection
        */
    
       /**
        * Add SubscriptionCollection
        * @param SubscriptionCollection $object
        */
      public function AddToSubscriptionCollection($object)
        {
            return parent::AddObject('SubscriptionCollection', $object);
        }
    
       /**
        * Add NotificationCollection
        * @param NotificationCollection $object
        */
      public function AddToNotificationCollection($object)
        {
            return parent::AddObject('NotificationCollection', $object);
        }
    
       /**
        * Add MsgSet
        * @param MsgSet $object
        */
      public function AddToMsgSet($object)
        {
            return parent::AddObject('MsgSet', $object);
        }
    

       /**
        * This function returns the entities.
        */
        public function getEntities()
        {
            return $this->_entities;
        }
    }
  
   /**
    * @class:Subscription
    * @type:EntityType
    * @key:ID
    */
    class Subscription extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:32
        * @FixedLength:
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:12
        * @FixedLength:
        * @FC_TargetPath:SyndicationAuthorName
        * @FC_ContentKind:
        * @FC_NsPrefix:
        * @FC_NsUri:
        * @FC_KeepInContent:false
        */
        public $user;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        * @FC_TargetPath:SyndicationUpdated
        * @FC_ContentKind:
        * @FC_NsPrefix:
        * @FC_NsUri:
        * @FC_KeepInContent:false
        */
        public $updated;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:
        * @FC_TargetPath:SyndicationTitle
        * @FC_ContentKind:
        * @FC_NsPrefix:
        * @FC_NsUri:
        * @FC_KeepInContent:false
        */
        public $title;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $deliveryAddress;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $persistNotifications;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:40
        * @FixedLength:
        */
        public $collection;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        */
        public $filter;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:
        */
        public $select;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:30
        * @FixedLength:
        */
        public $changeType;
    

       /**
        * Function to create an instance of Subscription
        * @param Edm.String $ID
        */
        public static function CreateSubscription(
            $ID)
        {   
            $Subscription = new Subscription();
            $Subscription->ID = $ID;
            return $Subscription;
        }

       /**
        * Constructor for Subscription
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Notification
    * @type:EntityType
    * @key:ID
    */
    class Notification extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:32
        * @FixedLength:
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:40
        * @FixedLength:
        */
        public $collection;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:
        * @FixedLength:
        * @FC_TargetPath:SyndicationTitle
        * @FC_ContentKind:
        * @FC_NsPrefix:
        * @FC_NsUri:
        * @FC_KeepInContent:false
        */
        public $title;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        * @FC_TargetPath:SyndicationUpdated
        * @FC_ContentKind:
        * @FC_NsPrefix:
        * @FC_NsUri:
        * @FC_KeepInContent:false
        */
        public $updated;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:30
        * @FixedLength:
        */
        public $changeType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $entriesOfInterest;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:112
        * @FixedLength:
        */
        public $recipient;
    

       /**
        * Function to create an instance of Notification
        * @param Edm.String $ID
        */
        public static function CreateNotification(
            $ID)
        {   
            $Notification = new Notification();
            $Notification->ID = $ID;
            return $Notification;
        }

       /**
        * Constructor for Notification
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Msg
    * @type:EntityType
    * @key:Kunnr
    * @key:Name
    * @key:Code
    */
    class Msg extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:200
        * @FixedLength:
        */
        public $MSGCONT;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:
        */
        public $MSGTYPE;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:16
        * @FixedLength:
        */
        public $Kunnr;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:
        */
        public $Name;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:
        */
        public $Code;
    

       /**
        * Function to create an instance of Msg
        * @param Edm.String $Kunnr
        * @param Edm.String $Name
        * @param Edm.String $Code
        */
        public static function CreateMsg(
            $Kunnr, 
            $Name, 
            $Code)
        {   
            $Msg = new Msg();
            $Msg->Kunnr = $Kunnr;
            $Msg->Name = $Name;
            $Msg->Code = $Code;
            return $Msg;
        }

       /**
        * Constructor for Msg
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
?>
  